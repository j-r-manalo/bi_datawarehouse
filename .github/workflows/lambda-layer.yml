name: Beta Lambda Layers Build

on:
  push:
    branches: [ '*' ]
    paths:
      - 'terraform_modules/verifyplus_pipeline/layers/python/Dockerfile'
      - 'terraform_modules/demand_pipeline/layers/python/Dockerfile'
      - 'terraform_modules/orchestrator/layers/python/Dockerfile'
  workflow_dispatch:
    inputs:
      force-rebuild:
        description: 'Force rebuild layers'
        type: boolean
        default: false

# Environment-specific variables
env:
  ENVIRONMENT: beta
  AWS_REGION: us-east-1
  DEMAND_BUCKET: invoice-transactions-beta-lambda-layer-bucket
  VERIFYPLUS_BUCKET: invoice-transactions-beta-verifyplus-lambda-layer-bucket
  ORCHESTRATOR_BUCKET: invoice-transactions-beta-orchestrator-lambda-bucket

jobs:
  check-layer-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-layers: ${{ steps.check-changes.outputs.changed-layers }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Needed to compare changes

      - name: Check for Layer Changes
        id: check-changes
        run: |
          # Define layer directories as an array
          LAYER_DIRS=(
            "terraform_modules/verifyplus_pipeline/layers/python"
            "terraform_modules/demand_pipeline/layers/python"
            "terraform_modules/orchestrator/layers/python"
          )
          
          # If force rebuild, mark all layers as changed
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force-rebuild }}" == "true" ]]; then
            echo "changed-layers=$(echo "${LAYER_DIRS[@]}" | jq -R 'split(" ")' -c)" >> $GITHUB_OUTPUT
            echo "Force rebuild requested, all layers marked as changed"
            exit 0
          fi
          
          # Initialize an empty array for changed layers
          CHANGED_LAYERS=()
          
          # Check each directory for changes
          for DIR in "${LAYER_DIRS[@]}"; do
            DOCKERFILE_PATH="${DIR}/Dockerfile"
            
            # Check if Dockerfile has changed
            if git diff --name-only HEAD^ HEAD | grep -q "${DOCKERFILE_PATH}"; then
              # Add this directory to the changed array
              CHANGED_LAYERS+=("$DIR")
            fi
          done
          
          # Handle empty array case explicitly
          if [ ${#CHANGED_LAYERS[@]} -eq 0 ]; then
            echo "changed-layers=[]" >> $GITHUB_OUTPUT
            echo "No changed layers detected"
          else
            # Create JSON array from non-empty bash array
            CHANGED_JSON=$(printf '"%s",' "${CHANGED_LAYERS[@]}" | sed 's/,$//')
            echo "changed-layers=[${CHANGED_JSON}]" >> $GITHUB_OUTPUT
            echo "Found changed layers: [${CHANGED_JSON}]"
          fi

  build-layers:
    needs: check-layer-changes
    if: needs.check-layer-changes.outputs.changed-layers != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        layer-directory: ${{ fromJson(needs.check-layer-changes.outputs.changed-layers) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up QEMU for ARM64 emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ITC_BETA }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ITC_BETA }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Layer Name
        id: determine-layer
        run: |
          # Extract the layer name from the directory path
          if [[ "${{ matrix.layer-directory }}" == *"verifyplus_pipeline"* ]]; then
            echo "layer_name=verifyplus" >> $GITHUB_OUTPUT
            echo "zip_name=verifyplus_layer.zip" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.layer-directory }}" == *"demand_pipeline"* ]]; then
            echo "layer_name=demand" >> $GITHUB_OUTPUT
            echo "zip_name=layer.zip" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.layer-directory }}" == *"orchestrator"* ]]; then
            echo "layer_name=orchestrator" >> $GITHUB_OUTPUT
            echo "zip_name=orchestrator_layer.zip" >> $GITHUB_OUTPUT
          else
            # Extract the last part of the path as a fallback layer name
            BASENAME=$(basename "${{ matrix.layer-directory }}")
            PARENT=$(basename "$(dirname "${{ matrix.layer-directory }}")")
            echo "layer_name=${PARENT}-${BASENAME}" >> $GITHUB_OUTPUT
            echo "zip_name=layer.zip" >> $GITHUB_OUTPUT
          fi

      - name: Build Layer with Dockerfile
        run: |
          cd ${{ matrix.layer-directory }}
          docker buildx create --use
          docker buildx build --platform linux/arm64 --load -t ${{ steps.determine-layer.outputs.layer_name }}-layer .

      - name: Extract Layer ZIP
        run: |
          # Create a container from the ARM image
          CONTAINER_ID=$(docker create ${{ steps.determine-layer.outputs.layer_name }}-layer)
          
          # Try to copy the zip file directly - this should work even with ARM containers
          echo "Attempting to copy ${{ steps.determine-layer.outputs.zip_name }} from container"
          if docker cp $CONTAINER_ID:/${{ steps.determine-layer.outputs.zip_name }} ./${{ steps.determine-layer.outputs.zip_name }}; then
            echo "✅ Successfully copied zip file"
          else
            echo "Failed to copy zip file from root, checking other locations"
            # Try other common locations
            for path in "/tmp/build/${{ steps.determine-layer.outputs.zip_name }}" "/opt/${{ steps.determine-layer.outputs.zip_name }}"; do
              echo "Trying to copy from $path"
              if docker cp $CONTAINER_ID:$path ./${{ steps.determine-layer.outputs.zip_name }}; then
                echo "✅ Successfully copied from $path"
                break
              fi
            done
          fi
          
          # Clean up the container
          docker rm $CONTAINER_ID
          
          # Check if we got the file
          if [ -f "./${{ steps.determine-layer.outputs.zip_name }}" ]; then
            echo "Successfully extracted ZIP file: $(ls -la ./${{ steps.determine-layer.outputs.zip_name }})"
          else
            echo "Failed to extract ZIP file. The ZIP file might be in a different location."
            exit 1
          fi

      - name: Upload to S3 and Publish Layer
        run: |
          VERSION=$(date +"%Y%m%d%H%M%S")
          BASE_LAYER_NAME="${{ steps.determine-layer.outputs.layer_name }}-${{ env.ENVIRONMENT }}-layer"
          VERSIONED_LAYER_NAME="${BASE_LAYER_NAME}-${VERSION}"
          mv ${{ steps.determine-layer.outputs.zip_name }} ${VERSIONED_LAYER_NAME}.zip
          
          # Select the appropriate bucket based on layer type
          if [[ "${{ steps.determine-layer.outputs.layer_name }}" == "verifyplus" ]]; then
            S3_BUCKET="${{ env.VERIFYPLUS_BUCKET }}"
          elif [[ "${{ steps.determine-layer.outputs.layer_name }}" == "demand" ]]; then
            S3_BUCKET="${{ env.DEMAND_BUCKET }}"
          elif [[ "${{ steps.determine-layer.outputs.layer_name }}" == "orchestrator" ]]; then
            S3_BUCKET="${{ env.ORCHESTRATOR_BUCKET }}"
          else
            echo "Unknown layer type: ${{ steps.determine-layer.outputs.layer_name }}"
            exit 1
          fi
          
          # Upload zip to S3
          S3_KEY="lambda_layers/${VERSIONED_LAYER_NAME}.zip"
          aws s3 cp ${VERSIONED_LAYER_NAME}.zip s3://${S3_BUCKET}/${S3_KEY}
          
          echo "Uploaded layer to s3://${S3_BUCKET}/${S3_KEY}"
          
          # Publish new layer version
          echo "Publishing new Lambda layer version..."
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name "${BASE_LAYER_NAME}" \
            --description "Auto-published by GitHub Actions on $(date)" \
            --content S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} \
            --compatible-runtimes python3.12 \
            --compatible-architectures "arm64" \
            --query 'LayerVersionArn' \
            --output text)
          
          echo "Published new layer version: ${LAYER_ARN}"
          
          # Store the layer ARN in Parameter Store for Terraform to use
          echo "Storing layer ARN in Parameter Store..."
          aws ssm put-parameter \
            --name "/lambda-layers/${BASE_LAYER_NAME}/latest-arn" \
            --value "${LAYER_ARN}" \
            --type String \
            --overwrite
          
          echo "Parameter stored: /lambda-layers/${BASE_LAYER_NAME}/latest-arn"